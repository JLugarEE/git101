---------- LESSON4_MOVINGON
$ # NOTES:===== Intro git ---- video 2 -------------
$ # They did mention different OSes, the local Git and the GitHub web share,
$ # 10 commands/clicks and finally the GUI and CLI.
$ # Using Local via CLI or with GUI, and
$ # Git Hub/remote for collaboration via a web address for I/O
$ # Using PUSH/PULL commands to work local and remotely
$ # NOTES:===== Install git tools ---- video 3 -------------
$ # assumed done.

$ # NOTES:===== git local ---- video 5 -------------
$ # 1) init: for local and remote projects
$ git init projName						# Creates a local folder projName
$ ## Web via GUI:			# My Git Hub space/Repositories Tab/[[New (repository)]] green button
$					# Give repo a unique name in your GH space
$					# Public OR Private
$ ## Check Readme.md file/[[Create Repository]]
$ ## Linking/Syncing the local/remote repositories, my MO, is left for later video(s).


$ # NOTES:===== MOVE ---- video 6 -------------
$ # 2) commit (2 of 3 ways)/ status/ add
$ # a) $ git status			# Shows (local) status of any changes in the active branch that 
$					# may (red colored) need to be committed
$ # b) $ git add filename		# Stages the file for uploading; in other words tags it for sharing/revisioning
$ # c) $ git status			# Shows the "filename" as green or STAGED for revisioning/sharing
$ # d) $ git commit -m "Reason for the modifications/sharing of 'filename'"
$ 				# Saves the message following -m to the (local) repository and uploads the 'filename'
$ ## Via GUI/web:			# [edit] on desired filename; then [[Commit]] green button


---------- LESSON5_DIFF_LOG_CMDS
$ # NOTES:===== git local ---- video 7 -------------
$ git diff						# Shows differences between last work and staged area
$ git diff HEAD						# Shows differences between last commit and staged area
$ git diff --color-words				# Shows just words of the change instead of a whole line
$ git diff --word-dff		# Shows just words of the change instead of a whole line with [-]/{+ } formating
$ git diff --stat			# Shows changes by file at file level as summary, not line level details

$ # NOTES:===== git local ---- video 8 -------------
$ git log				# Shows latest to earliest commit history ref #, Author & Date, commit msg
$ git log --oneline					# Shows short id and 1 line of the commit message  
$ git log --stat					# Shows full log plus status/file level summary of mods
$ git log --patch					# Shows full log info and diffs between commits
$ git log --patch -- oneline				# Shows the patch details and oneline summary
$ git log --graph --all --decorate --oneline		# Shows oneline summary, ASCII art all commits, branches and tags


---------- LESSON6_REMOVE_MOVE
$ # NOTES:===== REMOVE ---- video 9 -------------
$ git rm file2remove.txt		# delete file2remove.txt
$ git status
$ git commit -m "Removed file2remove.txt"
$ rm file2remove.txt			# filesystem (non-git) kill
$ git rm file2remove.txt		# git removal from stage (prior rm <fname>)
$ git add -u .				# after hard file system delets; rd staging
$ git status 				# show commit actions (deletes/adds)
$ git rm --cached fileX.txt		# remove from staging keep in work dir
$## GUI:				# has/use deletion check box

$ # NOTES:===== MOVE ---- video 10 -------------
$ git mv header.jpg source/header.jpg	# move/rename file; PREFERRED MOVE
$ git status				# show move/rename PREFERRED result
$ mv prod.log production.log		# non-git move/rename file Manually: 1)
$ git rm prod.log			# non-git move/rename file Manually: 2)
$ git add production.log		# non-git move/rename file Manually: 3)
$ git status 				# non-git move/rename file Manually: 4)

$ # NOTES:===== IGNORE ---- video 12 -------------
$ touch .gitignore					# a) create .gitignore file
$ git add .gitignore					# b) add/stage .gitignore file
$ git commit -m "Preparing to ignore temporary files"	# c) commit .gitignore file 
$ 							# d) edit file:	with files.*	
$ # file contents e:# [*.log				# e) only file/dir 
$ # file contents f:# tmp/]				# f) patterns; NO '[' or ']'
$ git commit -m "Ignore log files and temporary directory"
$## GUI 1: add file to master branch ".gitignore"
$## GUI 2: edit as usual/above with patterns and msg/commit
$## GUI 3: [(right button) template] to choose a language
$ git ls-files --others --ignored --exclude-standard	# shows ignored files


---------- LESSON7_BRANCH_COMMIT_MERGE_REVIEW
$ # Revisit and review Lesson3_newBranchToMerge
$ # NOTES:===== BRANCH ---- video 13 -------------
$ git branch new-branch-or-feature-name		#Creates a new branch 
$ git branch -d new-branch-or-feature-name  	# del branch from stage
$ git branch -D branch-or-feature-name		# delete branch fully
$ # Can't Delete a branch that is active
$ git checkout master			# change to master branch
$ # Can't change to a new branch if current has uncommitted changes
$ # NOTES:===== CHECKOUT ---- video 14 -------------
$ git branch/status			# Shows active branch
$ git checkout branch-desired		# Switches to branch-desired
$ git log				# See all historic commits
$ git checkout long-log-id		# Detached HEAD, no commits here
$ git checkout -- <file> 		# discards <file> changes in work dir
$ git checkout -b new-branch		# create and switch to 'new-branch'

$ # NOTES:===== MERGE ---- video 15 -------------
$ git checkout master			# prepare to merge into master
$ git merge branch-to-merge		# merges branch-to-merge to cur-branch 'master'
$ git merge cleanup-vars		# a branch that fails on CONFLICT
$ git status				# show files not commited/in CONFLICT
$ # edit CONFLICT between markers <<<< HEAD, separator line ====, and marker >>>> cleanup-vars as you determine what you want/need
$ git status/add edited-conflict-file		# commit(/merge completed) to master
$ git merge --abort			# rolls back commit and cleans stage/work dir
$ git merge --squash all-new-bar-graphs		# updates without history but commit branch
$ git commit -m "Bring in bar charts"	# complete merge w/out history
$ git log --oneline --decorate --graph --all -10	# show commit history
$ git branch -d cleanup-vars 		# cleans the branch hist after its merged


---------- GIT_GITHUB_LESSON8_MO_LOCAL_REMOTES
$ # NOTES:===== MOVE ---- video 16 -------------
$ #
$ # git = local		| vs | 	  	git-hub = remote
$ #     <----<<         fetch   
$ #			pull		<---<<	
$ #	>>----->	push
$ #
$ ls -a						# list local (.git/ available?)
$ pwd						# print local work dir
$ git init					# initialize a local repo @ cur dir
$ git remote -v 				# listing remotes
$ git remote add origin https:yourSpace		# sets link to remote repo as origin
$ git remote set-url origin https:SpaceTwo	# resets link to remote as origin
$ git remote rm origin				# removes remote (from stage?)
$ git branch -r					# list remote branches
$ git fetch origin				# syncs remote to local
$ git checkout feature1				# track remote branch feature1 from origin
$ git pull origin				# unpacks remote to origin/feature1
$ git push origin				# sends local/feature1 to remote/feature1
